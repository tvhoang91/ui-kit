{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "color-picker",
  "type": "registry:component",
  "title": "Color Picker",
  "description": "A color picker component using WordPress components.",
  "dependencies": ["@wordpress/components"],
  "registryDependencies": ["button"],
  "files": [
    {
      "path": "registry/yay/ui/color-picker/color-picker.tsx",
      "content": "\"use client\"\n\nimport \"./color-picker.css\"\n\nimport { useUncontrolled } from \"@/registry/yay/hooks/use-uncontrolled\"\nimport { useRef, useState } from \"react\"\nimport {\n  ColorPalette,\n  __experimentalInputControl as InputControl,\n  Button as WPButton,\n  ColorPicker as WPColorPicker,\n} from \"@wordpress/components\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/registry/yay/ui/button\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/registry/yay/ui/popover\"\nimport { Check, Copy } from \"lucide-react\"\n\ninterface ColorPickerProps {\n  value?: string\n  defaultColor?: string\n  onChangeColor?: (color: string) => void\n  className?: string\n  disabled?: boolean\n}\n\nexport function ColorPicker({\n  value: _value,\n  defaultColor,\n  onChangeColor: _onChangeColor,\n  className,\n  disabled = false,\n}: ColorPickerProps) {\n  const colors = [\n    { name: \"Black\", color: \"#181818\" },\n    { name: \"White\", color: \"#F5F5F5\" },\n    { name: \"Red\", color: \"#E7210A\" },\n    { name: \"Orange\", color: \"#F54A00\" },\n    { name: \"Green\", color: \"#5EA500\" },\n    { name: \"Blue\", color: \"#165CFB\" },\n    { name: \"Yellow\", color: \"#FDC700\" },\n  ]\n\n  const [value, onChange] = useUncontrolled({\n    value: _value,\n    defaultValue: defaultColor,\n    finalValue: \"#000000\",\n    onChange: _onChangeColor,\n  })\n  const inputValue = value.replace(/^#/, \"\").slice(0, 6)\n\n  const [copied, setCopied] = useState(false)\n  const contentRef = useRef<HTMLDivElement>(null)\n\n  const handleOpenAutoFocus = (event: Event) => {\n    const isColorInPalette = colors.some((color) => color.color === value)\n\n    if (!isColorInPalette) {\n      event.preventDefault()\n      return\n    }\n\n    event.preventDefault()\n  }\n\n  const handleChange = (newColor?: string) => {\n    if (!newColor) return\n    const normalized = newColor.startsWith(\"#\") ? newColor : `#${newColor}`\n    const trimmed = normalized.replace(/^#/, \"\").slice(0, 6)\n    const finalColor = `#${trimmed}`\n    onChange?.(finalColor)\n  }\n\n  const handleInputChange = (nextValue?: string) => {\n    const raw = nextValue ?? \"\"\n    const truncated = raw.slice(0, 6)\n    const candidate = `#${truncated}`\n    const isValidHex = /^#([0-9A-Fa-f]{3}|[0-9A-Fa-f]{6})$/.test(candidate)\n\n    if (isValidHex) {\n      onChange?.(candidate)\n    } else {\n      onChange?.(\"#000000\")\n    }\n  }\n\n  const handleCopy = async () => {\n    try {\n      await navigator.clipboard.writeText(value)\n      setCopied(true)\n      setTimeout(() => setCopied(false), 2000)\n    } catch (err) {\n      console.error(\"Failed to copy!\", err)\n    }\n  }\n\n  const handleClear = () => {\n    onChange?.(defaultColor ?? \"#000000\")\n  }\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          disabled={disabled}\n          className={cn(\n            \"w-[110px] cursor-pointer justify-start p-1\",\n            className\n          )}\n        >\n          <span\n            className=\"h-6.5 w-6.5 rounded-sm border\"\n            style={{ backgroundColor: value }}\n          />\n          <span className=\"text-start font-normal\">{value}</span>\n        </Button>\n      </PopoverTrigger>\n\n      <PopoverContent\n        className=\"w-fit min-w-[200px] px-1 py-3\"\n        align=\"start\"\n        sideOffset={5}\n        onOpenAutoFocus={handleOpenAutoFocus}\n        ref={contentRef}\n      >\n        <div className=\"flex flex-col gap-2\">\n          <div className=\"px-2\">\n            <ColorPalette\n              colors={colors}\n              value={value}\n              onChange={(newColor = \"#000000\") => handleChange(newColor)}\n              disableCustomColors={true}\n              clearable={false}\n              className=\"yay-wp-color-palette\"\n            />\n          </div>\n\n          <WPColorPicker\n            className=\"yay-wp-color-picker\"\n            color={value}\n            onChange={handleChange}\n            enableAlpha={false}\n            defaultValue={defaultColor}\n            copyFormat=\"hex\"\n          />\n\n          <div className=\"flex items-center justify-between gap-3 px-3\">\n            <div className=\"flex items-center gap-2\">\n              <InputControl\n                __next40pxDefaultSize\n                prefix={<span className=\"ml-3\">#</span>}\n                value={inputValue}\n                onChange={handleInputChange}\n                className=\"yay-wp-color-input\"\n              />\n              <WPButton onClick={handleCopy}>\n                {copied ? (\n                  <Check className=\"text-muted-foreground size-4\" />\n                ) : (\n                  <Copy className=\"text-muted-foreground size-4\" />\n                )}\n              </WPButton>\n            </div>\n            <Button\n              className=\"w-fit cursor-pointer\"\n              variant=\"ghost\"\n              type=\"button\"\n              onClick={handleClear}\n            >\n              Reset\n            </Button>\n          </div>\n        </div>\n      </PopoverContent>\n    </Popover>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/yay/ui/color-picker/color-picker.css",
      "content": ".yay-wp-color-picker > div:not(.react-colorful) {\n  display: none;\n}\n\n.yay-wp-color-picker,\n.yay-wp-color-picker .react-colorful {\n  width: 100% !important;\n}\n.yay-wp-color-picker .react-colorful .react-colorful__hue {\n  width: 92% !important;\n}\n.yay-wp-color-palette\n  .components-circular-option-picker\n  .components-circular-option-picker__swatches {\n  gap: 6px;\n}\n\n.yay-wp-color-input {\n  width: 100px;\n}\n\n.yay-wp-color-input .components-input-control__container {\n  border-radius: 6px;\n}\n.yay-wp-color-input .components-input-control__container input {\n  height: 36px !important;\n  min-height: 36px !important;\n}\n.components-button:focus:not(:disabled) {\n  box-shadow: none;\n}\n",
      "type": "registry:style"
    },
    {
      "path": "registry/yay/hooks/use-uncontrolled.ts",
      "content": "import { useState } from \"react\"\n\n/**\n * A hook that manages a state which can be either controlled or uncontrolled. Copy from mantine hooks.\n * Use this for Custom Input components follow Shadcn UI pattern.\n * Use this hooks to prepare for future migration from Antd Form, ahooks => react-hook-form, react-use\n */\n\nexport interface UseUncontrolledOptions<T> {\n  /** Value for controlled state */\n  value?: T\n\n  /** Initial value for uncontrolled state */\n  defaultValue?: T\n\n  /** Final value for uncontrolled state when value and defaultValue are not provided */\n  finalValue?: T\n\n  /** Controlled state onChange handler */\n  onChange?: (value: T, ...payload: any[]) => void\n}\n\nexport type UseUncontrolledReturnValue<T> = [\n  /** Current value */\n  T,\n\n  /** Handler to update the state, passes `value` and `payload` to `onChange` */\n  (value: T, ...payload: any[]) => void,\n\n  /** True if the state is controlled, false if uncontrolled */\n  boolean,\n]\n\nexport function useUncontrolled<T>({\n  value,\n  defaultValue,\n  finalValue,\n  onChange = () => {},\n}: UseUncontrolledOptions<T>): UseUncontrolledReturnValue<T> {\n  const [uncontrolledValue, setUncontrolledValue] = useState(\n    defaultValue !== undefined ? defaultValue : finalValue\n  )\n\n  const handleUncontrolledChange = (val: T, ...payload: any[]) => {\n    setUncontrolledValue(val)\n    onChange?.(val, ...payload)\n  }\n\n  if (value !== undefined) {\n    return [value as T, onChange, true]\n  }\n\n  return [uncontrolledValue as T, handleUncontrolledChange, false]\n}\n",
      "type": "registry:hook"
    }
  ]
}
